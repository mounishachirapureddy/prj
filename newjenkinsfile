
pipeline {
    agent any
    
   
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/mounishachirapureddy/prj.git'
            }
        }

        stage('Build') {
            steps {
                
                dir('client') {
                    sh 'npm install'
                    //bat 'npm test'
                }
                dir('servers/gamer-module') {
                    sh 'npm install'
                    //bat 'npm test'
                }

                dir('servers/merchant-module') {
                    sh 'npm install'
                    //bat 'npm test'
                }

                dir('servers/gaming-vendor-module') {
                    sh 'npm install'
                    //bat 'npm test'
                }

                dir('servers/general-module') {
                    sh 'npm install'
                    //bat 'npm test'
                }
            }
        }

        stage('Create Docker Images') {
            steps {
                dir('client'){
                    sh 'docker build -t client-image .'
                }
                dir('servers/gamer-module') {
                    sh 'docker build -t gamer-module .'
                }

                dir('servers/merchant-module') {
                    sh 'docker build -t merchant-module .'
                }
                
                dir('servers/gaming-vendor-module') {
                    sh 'docker build -t gaming-vendor-module .'
                    sh 'docker run -itd gaming-vendor-module'
                }

                dir('servers/general-module') {
                    sh 'docker build -t general-module .'
                }
            }
        }
         stage('Configure AWS') {
            steps {
                script {
                    // Configure AWS credentials
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: '03071f19-3951-4f10-9eeb-7d89cb66b86c']]) {
                        // Update AWS CLI configuration (optional)
                        sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                        sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                        sh 'aws configure set region ap-south-1'
                        
                        // Update Kubernetes configuration (kubeconfig)
                        
                    }
                }
            }
        }


       
        stage('Authenticate with ECR') {
            steps {
                script {
                    def ecrRegion = 'ap-south-1'  // Your ECR region
                    def ecrRegistry = '083118395813.dkr.ecr.ap-south-1.amazonaws.com'  // Your ECR registry URL

                    def ecrLogin = "aws ecr get-login-password --region ${ecrRegion}"
                    def ecrLoginCommand = "${ecrLogin} | docker login --username AWS --password-stdin ${ecrRegistry}"

                    sh ecrLoginCommand
                }
            }
        }

        stage('Pushing Image to ECR-client') {
            steps{
              script {
                withDockerRegistry( url: 'https://083118395813.dkr.ecr.ap-south-1.amazonaws.com/client-image:latest') {
                sh'docker tag client-image:latest 083118395813.dkr.ecr.ap-south-1.amazonaws.com/client-image:latest'
                sh 'docker push 083118395813.dkr.ecr.ap-south-1.amazonaws.com/client-image:latest'
                }
              }
            }
          }
          stage('Pushing Image to ECR-gamer-module') {
            steps{
              script {
                withDockerRegistry( url: 'https://083118395813.dkr.ecr.ap-south-1.amazonaws.com/gamer-module:latest') {
                sh'docker tag gamer-module:latest 083118395813.dkr.ecr.ap-south-1.amazonaws.com/gamer-module:latest'
                sh 'docker push 083118395813.dkr.ecr.ap-south-1.amazonaws.com/gamer-module:latest'
                }
              }
            }
          }
           stage('Pushing Image to ECR-merchant-module') {
            steps{
              script {
                withDockerRegistry( url: 'https://083118395813.dkr.ecr.ap-south-1.amazonaws.com/merchant-module:latest') {
                sh'docker tag merchant-module:latest 083118395813.dkr.ecr.ap-south-1.amazonaws.com/merchant-module:latest'
                sh 'docker push 083118395813.dkr.ecr.ap-south-1.amazonaws.com/merchant-module:latest'
                }
              }
            }
          }
          stage('Pushing Image to ECR-gaming-vendor') {
            steps{
              script {
                withDockerRegistry( url: 'https://083118395813.dkr.ecr.ap-south-1.amazonaws.com/gaming-vendor-module:latest') {
                sh'docker tag gaming-vendor-module:latest 083118395813.dkr.ecr.ap-south-1.amazonaws.com/gaming-vendor-module:latest'
                sh 'docker push 083118395813.dkr.ecr.ap-south-1.amazonaws.com/gaming-vendor-module:latest'
                }
              }
            }
          }
          stage('Pushing Image to ECR-general-module1') {
            steps{
              script {
                withDockerRegistry( url: 'https://083118395813.dkr.ecr.ap-south-1.amazonaws.com/general-module:latest') {
                sh'docker tag general-module:latest 083118395813.dkr.ecr.ap-south-1.amazonaws.com/general-module:latest'
                sh 'docker push 083118395813.dkr.ecr.ap-south-1.amazonaws.com/general-module:latest'
                }
              }
            }
          }
         
        stage('Deploy snappcoins services') {
            steps {
                dir('client'){
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/client/client-deployment.yaml'
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/client/client-service.yaml'
                        }
                   }
                 post{
                 success{
                        echo "Successfully deployed client-deployment and client-service"
                        }
                 failure{
                       echo "Failed deploying to client-deployment and  client-service"
                       }
                    }
                 }
                steps {
                dir('servers/gaming-vendor-module'){
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/gaming-vendor-module/gaming-vendor-module-deployment.yaml'
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/gaming-vendor-module/gaming-vendor-module-service.yaml'
                        }
                 }
                 post{
                 success{
                        echo "Successfully deployed  gaming-vendor-module-deployment and gaming-vendor-module-service"
                        }
                 failure{
                       echo "Failed deploying to  gaming-vendor-module-deployment and gaming-vendor-module-service"
                       }
                    }
                 }
                steps{
                dir('servers/gamer-module'){
                       sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/gamer-module/gamer-module-deployment.yaml'
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/gamer-module/gamer-module-service.yaml'
                        }
                       }
                 post{
                 success{
                        echo "Successfully deployed  gamer-module-deployment and  gamer-module-service"
                        }
                 failure{
                       echo "Failed deploying gamer-module-deployment and  gamer-module-service"
                       }
                    }
                 }
                steps{
                dir('servers/general-module'){
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/general-module/general-module-deployment.yaml'
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/general-module/general-module-service.yaml'
                        }
                      }
                post{
                 success{
                        echo "Successfully deployed general-module-deployment and  general-module-service"
                        }
                 failure{
                       echo "Failed deploying to general-module-deployment and  general-module-service"
                       }
                    }
                 }
                 steps{
                 dir('servers/merchant-module'){
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/merchant-module/merchant-module-deployment.yaml'
                        sh 'export KUBECONFIG=/new/directory/path/config && /usr/local/bin/kubectl apply -f /var/lib/jenkins/workspace/file1/prj/servers/merchant-module/merchant-module-service.yaml'
                        }
                       }
                  post{
                 success{
                        echo "Successfully deployed  merchant-module-deployment and merchant-module-service"
                        }
                 failure{
                       echo "Failed deploying to merchant-module-deployment and merchant-module-service"
                       }
                    }
                 }
               
            }
        }

        }
    }
-----------
pipeline {
    agent any

    stages {
        stage('Deploy Pod') {
            steps {
                script {
                    // Your deployment steps go here
                    // For example, use kubectl to deploy your pod
                    sh 'kubectl apply -f your-deployment.yaml'
                }
            }
        }

        stage('Check Health') {
            steps {
                script {
                    // Replace 'your-pod-label' and 'your-container-name' with your actual pod label and container name
                    def podStatus = sh(script: 'kubectl get pods -l your-pod-label -o jsonpath="{.items[0].status.containerStatuses[?(@.name == \'your-container-name\')].ready}"', returnStatus: true).trim()

                    if (podStatus == 'true') {
                        echo 'Pod is healthy'
                    } else {
                        echo 'Pod is not healthy. Replacing with a new pod.'
                        
                        // Scale down the current deployment to 0 replicas
                        sh 'kubectl scale deployment your-deployment-name --replicas=0'
                        
                        // Scale up the deployment to the desired number of replicas
                        sh 'kubectl scale deployment your-deployment-name --replicas=desired-replica-count'
                        
                        // You may need additional steps depending on your specific deployment strategy
                        // For example, wait for the new pods to become ready
                    }
                }
            }
        }

        // Add more stages as needed for additional steps in your pipeline
    }
}

