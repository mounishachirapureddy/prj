pipeline {
options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '4'))
  }

    agent any

    environment {    
        ECR_REGION = 'ap-south-1'
        ECR_REGISTRY = '083118395813.dkr.ecr.ap-south-1.amazonaws.com'
        KUBECONFIG_PATH = '/new/directory/path/config'
        VERSION = 'v1.0'
    }

    stages {
        stage('Configure AWS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'f457fa0c-671e-4380-a0fc-a931d9f7d87c']]) {
                        sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                        sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                        sh 'aws configure set region ap-south-1'
                    }
                }
            }
        }
        
        stage('init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('validate') {
            steps {
                sh 'terraform validate'                
            }
        }
        stage('plan') {
            steps {
                sh 'terraform plan'
            }
        }
        stage('action') {
            steps {
                sh 'terraform apply -var="environment_name=qa" --auto-approve'
            }
        }



        
        stage('Initialize Variables') {
            steps {
                script {
                    DOCKER_IMAGE_NAMES = ['client-image', 'gamer-module', 'merchant-module', 'gaming-vendor-module', 'general-module']
                }
            }
        }
     
       
        
         stage('Create Docker Images') {
            steps {
                dir('client') {
                    sh 'docker build -t client-image:${VERSION}-${BUILD_NUMBER} .'
                }
                dir('servers/gamer-module') {
                    sh 'docker build -t gamer-module:${VERSION}-${BUILD_NUMBER} .'
                }
                dir('servers/merchant-module') {
                    sh 'docker build -t merchant-module:${VERSION}-${BUILD_NUMBER} .'
                }
                dir('servers/gaming-vendor-module') {
                    sh 'docker build -t gaming-vendor-module:${VERSION}-${BUILD_NUMBER} .'   
                }
                dir('servers/general-module') {
                    sh 'docker build -t general-module:${VERSION}-${BUILD_NUMBER} .'
                }
            }
        }

         stage('Push Docker Images to ECR') {
            steps {
                // Push Docker images to ECR
                script {
                     DOCKER_IMAGE_NAMES.each { imageName ->
                    withDockerRegistry(url: "https://${ECR_REGISTRY}/${imageName}:${VERSION}") {
                    sh "docker tag ${imageName}:${VERSION}-${BUILD_NUMBER} ${ECR_REGISTRY}/${imageName}:${VERSION}-${BUILD_NUMBER}"
                    sh "docker push ${ECR_REGISTRY}/${imageName}:${VERSION}-${BUILD_NUMBER}"
                }
                }
                }

            }
        }
   


         stage('Deploy snappcoins services') {
            steps {
                sh "export KUBECONFIG=/new/directory/path/config"
                sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                sh 'kubectl apply -f VirtualService.yaml'
               
                dir('client'){
                     sh "export KUBECONFIG=/new/directory/path/config"
                     sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                     sh 'kubectl apply -f client-serviceaccount.yaml'
                    sh 'kubectl apply -f client-deployment.yaml'
                    sh ' kubectl apply -f client-service.yaml'
                        }
                dir('servers/gaming-vendor-module'){
                    sh "export KUBECONFIG=/new/directory/path/config"
                    sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                    sh 'kubectl apply -f gaming-vendor-module-serviceaccount.yaml'
                    sh 'kubectl apply -f gaming-vendor-module-deployment.yaml'
                    sh 'kubectl apply -f gaming-vendor-module-service.yaml'
                        }
                dir('servers/gamer-module'){
                    sh "export KUBECONFIG=/new/directory/path/config"
                    sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                    sh 'kubectl apply -f gamer-module-serviceaccount.yaml'
                    sh 'kubectl apply -f gamer-module-deployment.yaml'
                    sh 'kubectl apply -f gamer-module-service.yaml'
                        }
                dir('servers/general-module'){
                    sh "export KUBECONFIG=/new/directory/path/config"
                    sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                    sh 'kubectl apply -f general-module-serviceaccount.yaml'
                    sh 'kubectl apply -f general-module-deployment.yaml'
                    sh 'kubectl apply -f general-module-service.yaml'
                        }
                dir('servers/merchant-module'){
                    sh "export KUBECONFIG=/new/directory/path/config"
                    sh "aws eks update-kubeconfig --name snappcoins-cluster --region ap-south-1"
                    sh 'kubectl apply -f merchant-module-serviceaccount.yaml'
                    sh 'kubectl apply -f merchant-module-deployment.yaml'
                    sh 'kubectl apply -f merchant-module-service.yaml'
                        }
            }
            }
            stage('Print Ingress IP') {
            steps {
            script {
                def externalIP = sh(script: 'kubectl get svc istio-ingressgateway -n istio-system -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"', returnStdout: true).trim()

                echo "Ingress Gateway External IP: ${externalIP}"
        }
    }
            
        }
      stage('Conditional Job Trigger') {
            steps {
                script {
                    // Add your condition here
                    def shouldTriggerNextJob = input(
                        id: 'triggerConfirmation',
                        message: 'Do you want to trigger the next job?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with triggering?', name: 'TRIGGER']
                        ]
                    )

                    if (shouldTriggerNextJob) {
                        build job: 'qa', wait: false
                    } else {
                        echo 'Not triggering the next job.'
                    }
                }
            }
        }
    }
  stage('Conditional Job Trigger') {
            steps {
                script {
                    // Add your condition here
                    def shouldTriggerNextJob = input(
                        id: 'triggerConfirmation',
                        message: 'Do you want to trigger the next job?',
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with triggering?', name: 'TRIGGER']
                        ]
                    )

                    if (shouldTriggerNextJob) {
                        build job: 'qa', wait: false
                    } else {
                        echo 'Not triggering the next job.'
                    }
                }
            }
        }
    }
}
   

    

    }
    
   

